{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1ZtT0IU402w5cbsdfjIzXKi31shloZDrV","timestamp":1750226788567}],"mount_file_id":"1czGs4dvpF2Hfv4kBtXOYK85EHPxF1FDW","authorship_tag":"ABX9TyOs9z6WiReSfWlcOt7vRTRD"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["**PURPOSE**: To continue the selection process  of Stellar Lightcurves with Exoplanet Transit Events using  availability & quality of Flux observations as criteria. *Note: This script builds upon the initial list created by the prior script EDA_ZERO which selected lightcurves based on known transit parameters. In this this script, the focus is on the **availability** and **quality** of the Flux Timeseries.*\n","\n","**GOALS**:\n","Begin with the Initial List from EDA_ZERO script and take the following actions:\n","\n","1. Filter by Minimum Observation Window: Only select  Lightcurves (in CSV format) which have observations corresponding every one of the  4th, 5th, 6th, and 7th quarters of the Kepler Mission.(One quarter is a 90-day period, and observations are 29.4 minutes apart).\n","\n","2. Compute Completeness Metric for further filtration: determine the quantity of  observations as a percentage of the expected number for each quarter (which is approximately equal to the number of 29.4 minute intervals in 90 days, around 4416)\n","\n","3. Compute Data Quality Metric for further filtration: determine the amount of Hi quality observations as a percentage of all available observations, using the Quality indicator supplied by the Kepler Data Source, marking those curves with atleast 80% high quality observations.\n","\n","4. Fore each of these lightcurves, store only the Hi Quality observations for just quarters 4 through 7 in a separate CSV file. Also store computed metrics for each lightcurve in an ancillary file.\n","\n","\n","\n","**INPUTS:**\n","1. CSV files each containing a Raw lightcurve (actual Time& Flux observations) for Exoplanetary LightCurves in the Kepler Mission having exactly 1 transiting planet.\n","2. Initial List of  Lightcurve Identifiers (**selected_lightcurves.csv**) obtained through the selection process in the EDA_ZERO script.\n","\n","**OUTPUTS**:\n","1. **lightcurve_quarterly_stats.csv**: dataquality metrics for each lightcurve and quarter combination\n","2. **lightcurve_stats.csv**: data quality metrics at a summary level for each lightcurve\n","3. **\"planetname\"_4q_curve.csv**: Hi-Quality Time and Flux Observations for Quarters 4 through 7 for each lightcurve. This will become the inputs to PREPROCESSING,  FEATURE ENGINEERING, and MODELING steps."],"metadata":{"id":"zdnskbiJmF27"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"BjytLykUpTQR"},"outputs":[],"source":["import os\n","import pandas as pd\n","import numpy as np\n","import re\n","import warnings\n","from pathlib import Path\n","from datetime import datetime\n","\n","warnings.filterwarnings(\"ignore\", category=UserWarning)\n","\n","\n","print(\"Pandas version:\", pd.__version__)\n","print(\"NumPy version:\", np.__version__)\n","print(\"RE:\", re.__version__)"]},{"cell_type":"code","source":["# First, unmount if already mounted\n","!fusermount -u /content/drive\n","\n","# Then remount\n","from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"id":"zDr1y6zcqIRL"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Define paths (replace with your actual paths or use environment variables)\n","ROOT = Path(\"/content/drive/MyDrive/Berkeley_AIML/Capstone/lightcurves\")\n","RAW_CURVES_PATH = ROOT / \"raw_exoplanet_curves\"\n","CHOSEN_CURVES_PATH = ROOT / \"chosen_exoplanet_curves\"\n","ANCILLARY = ROOT / 'ancillary'\n","\n","# Expected observations per quarter\n","EXPECTED_OBS = {\n","    \"Q04\": 4400,\n","    \"Q05\": 4410,\n","    \"Q06\": 4460,\n","    \"Q07\": 4425\n","}\n","TOTAL_EXPECTED_OBS = sum(EXPECTED_OBS.values())  # 17695\n","\n","# Initialize lists for output data\n","quarterly_stats = []\n","overall_stats = []\n","# Load selected exoplanets DataFrame\n","print(ANCILLARY)\n","\n","try:\n","    selected_exoplanets_df = pd.read_csv(os.path.join(ANCILLARY, \"selected_exoplanets.csv\"))\n","    print(f\"Loaded selected_exoplanets.csv with {len(selected_exoplanets_df)} entries.\")\n","    # Create a dictionary to lookup the kepid by planet name\n","    pl_name_to_kepid = selected_exoplanets_df.set_index('pl_name')['kepid'].to_dict()\n","\n","except FileNotFoundError:\n","    print(\"Error: selected_exoplanets.csv not found in ANCILLARY.\")\n","    selected_exoplanets_df = pd.DataFrame(columns=[\"planet_name\", \"kepid\"])\n","    exit(1)"],"metadata":{"id":"2Y6yGhVm66ix"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"2H4YGmRkFTHr"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import os\n","import pandas as pd\n","import numpy as np\n","\n","selected_exoplanets_count = 0\n","# Iterate over planet names in selected_exoplanets_df\n","for pl_name in selected_exoplanets_df[\"pl_name\"].values:\n","    # Step 1: Construct filename of raw curve from planet name\n","    print(f\"Processing {pl_name}.........\")\n","    planet_name = pl_name.replace(\" \", \"_\")\n","    filename = f\"{planet_name}_rawcurves.csv\"\n","    timestamp = pd.Timestamp.now()\n","\n","    # Step 2: Check if file exists\n","    file_path = os.path.join(RAW_CURVES_PATH, filename)\n","    if not os.path.exists(file_path):\n","        overall_stats.append({\n","            \"kepid\": None,\n","            \"planet_name\": planet_name,\n","            \"selected\": True,\n","            \"all_qtrs_exist\": False,\n","            \"total_rows\": 0,\n","            \"hi_quality_rows\": 0,\n","            \"nan_count\": 0,\n","            \"dq_percent\": 0.0,\n","            \"overall_quality\": False,\n","            \"completeness\": 0.0,\n","            \"timestamp\": timestamp,\n","            \"comment\": f\"File not found: {file_path}\"\n","        })\n","        continue\n","\n","    # Step 3: Load raw lightcurve\n","    try:\n","        raw_lightcurve_df = pd.read_csv(file_path)\n","    except (FileNotFoundError, KeyError, IndexError) as e:\n","        print(f\"Error loading {filename}: {e}\")\n","        overall_stats.append({\n","            \"kepid\": None,\n","            \"planet_name\": planet_name,\n","            \"selected\": True,\n","            \"all_qtrs_exist\": False,\n","            \"total_rows\": 0,\n","            \"hi_quality_rows\": 0,\n","            \"nan_count\": 0,\n","            \"dq_percent\": 0.0,\n","            \"overall_quality\": False,\n","            \"completeness\": 0.0,\n","            \"timestamp\": timestamp,\n","            \"comment\": f\"Error loading {filename}: {e}\"\n","        })\n","        continue\n","\n","    # Step 4: Filter rows with 2-digit quarter numbers in mission column\n","    valid_missions = raw_lightcurve_df[\"mission\"].str.extract(r\"(0[4-7])$\")\n","    raw_lightcurve_df = raw_lightcurve_df[valid_missions[0].notna()].copy()\n","    valid_missions = valid_missions[valid_missions[0].notna()][0]\n","\n","    # Step 5: Extract quarter as Q4, Q5, Q6, Q7\n","    raw_lightcurve_df[\"quarter\"] = \"Q\" + valid_missions\n","    raw_lightcurve_df = raw_lightcurve_df[raw_lightcurve_df[\"quarter\"].isin([\"Q04\", \"Q05\", \"Q06\", \"Q07\"])]\n","\n","    # Step 6: Check for 4 consecutive quarters (Q4–Q7)\n","    available_quarters = set(raw_lightcurve_df[\"quarter\"].unique())\n","    required_quarters = {\"Q04\", \"Q05\", \"Q06\", \"Q07\"}\n","    all_qtrs_exist = required_quarters.issubset(available_quarters)\n","\n","    # Initialize overall statistics\n","    total_rows_all = 0\n","    hi_quality_rows_all = 0\n","    non_nan_hi_quality_rows_all = 0\n","    completeness_all = 0.0\n","    dq_percent_all = 0.0\n","\n","    if all_qtrs_exist:\n","        selected_exoplanets_count += 1\n","        print(f\"Candidates so far....{selected_exoplanets_count}\") if selected_exoplanets_count % 10 == 0 else None\n","        kepid = pl_name_to_kepid[pl_name]\n","        # Step 7: Compute quarterly statistics\n","        total_rows = 0\n","        hi_quality_obs_count = 0\n","        nan_obs_count = 0\n","        non_nan_hi_quality_count = 0\n","        dq_percent = 0.0\n","        for quarter in required_quarters:\n","            qtr_df = raw_lightcurve_df[raw_lightcurve_df[\"quarter\"] == quarter]\n","            total_rows = len(qtr_df)\n","            hi_quality_df = qtr_df[qtr_df[\"quality\"] == 0]\n","            hi_quality_obs_count = len(hi_quality_df)\n","            nan_obs_count = len(hi_quality_df[hi_quality_df[\"flux\"].isna() | hi_quality_df[\"time\"].isna()]) + (hi_quality_df['flux'] == \"———\").sum()\n","            non_nan_hi_quality_count = hi_quality_obs_count - nan_obs_count\n","            dq_percent = np.round((non_nan_hi_quality_count / total_rows * 100.0), 2) if total_rows > 0 else 0.0\n","            completeness = np.round((total_rows / EXPECTED_OBS[quarter] * 100), 2) if EXPECTED_OBS[quarter] > 0 else 0.0\n","\n","            quarterly_stats.append({\n","                \"kepid\": kepid,\n","                \"planet_name\": planet_name,\n","                \"quarter\": quarter,\n","                \"total_rows\": total_rows,\n","                \"hi_quality_obs_count\": hi_quality_obs_count,\n","                \"nan_obs_count\": nan_obs_count,\n","                \"dq_percent\": dq_percent,\n","                \"completeness\": completeness,\n","                \"timestamp\": timestamp\n","            })\n","\n","            # Update overall stats\n","            total_rows_all += total_rows\n","            hi_quality_rows_all += hi_quality_obs_count\n","            non_nan_hi_quality_rows_all += non_nan_hi_quality_count\n","\n","        # Step 8: Filter and save 4-quarter lightcurve\n","        filtered_df = raw_lightcurve_df[\n","            (raw_lightcurve_df[\"quarter\"].isin([\"Q04\", \"Q05\", \"Q06\", \"Q07\"])) &\n","            (raw_lightcurve_df[\"quality\"] == 0)\n","        ][[\"quarter\", \"time\", \"flux\", \"cadenceno\"]]\n","        filtered_df[\"planet_name\"] = planet_name\n","        output_path = os.path.join(CHOSEN_CURVES_PATH, f\"{planet_name}_4q_curve.csv\")\n","        filtered_df.to_csv(output_path, index=False)\n","        print(f\"Saved filtered lightcurve: {output_path}\")\n","\n","        # Step 9: Compute overall statistics\n","        dq_percent_all = np.round((non_nan_hi_quality_rows_all / total_rows_all * 100), 2) if total_rows_all > 0 else 0.0\n","        completeness_all = np.round((total_rows_all / TOTAL_EXPECTED_OBS * 100), 2) if TOTAL_EXPECTED_OBS > 0 else 0.0\n","\n","        # Check overall quality (completeness >= 80% for all quarters)\n","        quarter_completeness = {row[\"quarter\"]: row[\"completeness\"] for row in quarterly_stats[-4:]}\n","        overall_quality = all(comp >= 80.0 for comp in quarter_completeness.values())\n","\n","        overall_stats.append({\n","            \"kepid\": kepid,\n","            \"planet_name\": planet_name,\n","            \"all_qtrs_exist\": True,\n","            \"selected\": True,\n","            \"total_rows\": total_rows_all,\n","            \"hi_quality_rows\": hi_quality_rows_all,\n","            \"dq_percent\": dq_percent_all,\n","            \"overall_quality\": overall_quality,\n","            \"completeness\": completeness_all,\n","            \"timestamp\": timestamp,\n","            \"comment\": \"required quarters exist\"\n","        })\n","    else:\n","        overall_stats.append({\n","            \"kepid\": None,\n","            \"planet_name\": planet_name,\n","            \"all_qtrs_exist\": False,\n","            \"selected\": True,\n","            \"total_rows\": 0,\n","            \"hi_quality_rows\": 0,\n","            \"dq_percent\": 0.0,\n","            \"overall_quality\": False,\n","            \"completeness\": 0.0,\n","            \"timestamp\": timestamp,\n","            \"comment\": \"required quarters do not exist\"\n","        })\n","\n","# Save output CSVs\n","quarterly_stats_df = pd.DataFrame(quarterly_stats)\n","quarterly_stats_df.to_csv(os.path.join(CHOSEN_CURVES_PATH, \"lightcurve_quarterly_stats.csv\"), index=False)\n","print(f\"Saved quarterly stats to {os.path.join(CHOSEN_CURVES_PATH, 'lightcurve_quarterly_stats.csv')}\")\n","\n","overall_stats_df = pd.DataFrame(overall_stats)\n","overall_stats_df.to_csv(os.path.join(CHOSEN_CURVES_PATH, \"lightcurve_stats.csv\"), index=False)\n","print(f\"Saved overall stats to {os.path.join(CHOSEN_CURVES_PATH, 'lightcurve_stats.csv')}\")\n","print(f\"Selected Exoplanets Count = {selected_exoplanets_count}\")"],"metadata":{"id":"v4GDYFrnU0Z8"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"DyNYZFTa6eWO"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"Sm06d1nwB5vG"},"execution_count":null,"outputs":[]}]}